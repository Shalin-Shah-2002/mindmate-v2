rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own profile data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow other users to update followers/following arrays for social features
      allow update: if request.auth != null && 
        // Only allow updates to followers, following, followersCount, followingCount fields
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['followers', 'following', 'followersCount', 'followingCount']) &&
        (
          // Allow adding current user's ID to followers array
          (request.auth.uid in request.resource.data.followers && !(request.auth.uid in resource.data.followers)) ||
          // Allow removing current user's ID from followers array  
          (!(request.auth.uid in request.resource.data.followers) && request.auth.uid in resource.data.followers) ||
          // Allow adding current user's ID to following array
          (request.auth.uid in request.resource.data.following && !(request.auth.uid in resource.data.following)) ||
          // Allow removing current user's ID from following array
          (!(request.auth.uid in request.resource.data.following) && request.auth.uid in resource.data.following) ||
          // Allow count updates 
          (request.resource.data.followersCount >= 0 && request.resource.data.followingCount >= 0)
        );
    }
    
    // Users can read other users' profile data for social features and search
    match /users/{userId} {
      allow read: if request.auth != null;
      
      // Note: For search functionality, we allow all authenticated users to read user profiles
      // The client application should respect privacy settings and only show appropriate data
      // Private users can still be found in search but won't show sensitive information
    }
    
    // Mood entries - users can read/write their own data
    match /mood_entries/{userId}/entries/{entryId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User settings - users can read/write their own settings
    match /user_settings/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // SOS contacts - users can read/write their own SOS contacts
    match /sos_contacts/{userId}/contacts/{contactId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Following/Followers - users can manage their own social connections
    match /social_connections/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User chat profiles - users can read/write their own, others can read for trust verification
    match /user_chat_profiles/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Allow system/admin updates for trust level progression and safety flags
      allow update: if request.auth != null && (
        request.auth.uid == userId ||
        // System updates for trust levels and community scores
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['trustLevel', 'communityScore', 'lastTrustLevelUpdate', 'safetyFlags', 'vulnerabilityIndicators'])
      );
    }
    
    // Chat rooms - read access based on trust levels, write for creation and moderation
    match /chat_rooms/{roomId} {
      allow read: if request.auth != null;
      
      // Users can create rooms if they have appropriate trust level OR it's system initialization
      allow create: if request.auth != null && (
        request.resource.data.createdBy == request.auth.uid ||
        request.resource.data.createdBy == 'system'
      );
      
      // Room creators and moderators can update rooms
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.createdBy ||
        request.auth.uid in resource.data.moderatorIds ||
        resource.data.createdBy == 'system'
      );
      
      // Only room creators can delete rooms (except system rooms)
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.createdBy &&
        resource.data.createdBy != 'system';
    }
    
    // Chat messages - participants can read, write based on room participation and trust
    match /chat_messages/{roomId}/messages/{messageId} {
      allow read: if request.auth != null;
      
      // Users can create messages if they're in the room OR it's a system message
      allow create: if request.auth != null && (
        (request.auth.uid == request.resource.data.senderId &&
         request.resource.data.senderId != null) ||
        // Allow system messages
        request.resource.data.senderId == 'system'
      );
      
      // Message authors can update their own messages (for editing)
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.senderId;
      
      // Authors and moderators can delete messages
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.senderId
        // Moderator deletion should be handled through cloud functions
      );
    }
    
    // Chat reports - users can create reports, moderators can read/update
    match /chat_reports/{reportId} {
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.reporterId;
      
      // Only system/moderators should read reports
      allow read: if request.auth != null;
      
      // Only system can update report status
      allow update: if request.auth != null;
    }
    
    // Chat room participants - manage room membership
    match /chat_room_participants/{roomId}/participants/{userId} {
      allow read: if request.auth != null;
      
      // Users can join/leave rooms themselves
      allow create, delete: if request.auth != null && 
        request.auth.uid == userId;
      
      // Moderators can manage participants
      allow update, delete: if request.auth != null;
    }
    
    // Collection group query for participants - allow authenticated users to query their own participation
    match /{path=**}/participants/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
    }
    
    // Posts - community feature rules
    match /posts/{postId} {
      // Anyone authenticated can read posts
      allow read: if request.auth != null;
      
      // Only authenticated users can create posts
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId;
      
      // Update/delete rules:
      // - Post author can update/delete their own post
      // - Any authenticated user may update ONLY likesCount (Â±1) or commentsCount (+1)
      allow update: if request.auth != null && (
        // Author full control
        request.auth.uid == resource.data.userId ||

        // Allow updates that change ONLY likesCount
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['likesCount']) ||

        // Allow updates that change ONLY commentsCount
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['commentsCount'])
      );

      // Only author can delete the post
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Post subcollections (likes, comments, shares)
    match /posts/{postId}/{subcollection=**} {
      // Anyone authenticated can read subcollections
      allow read: if request.auth != null;
      
      // Users can create likes/comments (with proper userId validation)
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId;
      
      // Users can delete their own likes/comments
      allow delete: if request.auth != null && 
                   request.auth.uid == resource.data.userId;
    }
    
    // Reports collection for community safety
    match /reports/{reportId} {
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.reportedBy;
      allow read: if false; // Only admins should read reports (implement admin rules later)
    }
    
    // Moderation logs - allow system to create and authenticated users to read their own
    match /moderation_log/{logId} {
      allow create: if request.auth != null;
      // Allow users to read logs about themselves (targetUserId),
      // and moderators (by moderatorId). Some logs may also include 'userId'.
      allow read: if request.auth != null && (
                    request.auth.uid == resource.data.userId ||
                    request.auth.uid == resource.data.targetUserId ||
                    request.auth.uid == resource.data.moderatorId
                  );
    }
    
    // Crisis interventions - allow users to create for themselves, system to read/write
    match /crisis_interventions/{interventionId} {
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId;
      allow read, update: if request.auth != null && 
                          request.auth.uid == resource.data.userId;
    }
    
    // Early interventions - allow users to create for themselves, system to read/write  
    match /early_interventions/{interventionId} {
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId;
      allow read, update: if request.auth != null && 
                          request.auth.uid == resource.data.userId;
    }

    // Safety violations - used for progressive enforcement (warnings/kick)
    match /safety_violations/{violationId} {
      // Only authenticated users can create a violation record for themselves
      allow create: if request.auth != null &&
                    request.auth.uid == request.resource.data.userId;

      // Users can read their own violations (used to count recent strikes)
      allow read: if request.auth != null &&
                  request.auth.uid == resource.data.userId;

      // No client-side updates/deletes to past entries
      allow update, delete: if false;
    }
    
    // Allow authenticated users to read public data they might need
    match /public_data/{document=**} {
      allow read: if request.auth != null;
    }
    
    // Deny all other operations
    match /{document=**} {
      allow read, write: if false;
    }
  }
}