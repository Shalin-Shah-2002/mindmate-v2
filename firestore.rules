rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own profile data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow other users to update followers/following arrays for social features
      allow update: if request.auth != null && 
        // Only allow updates to followers, following, followersCount, followingCount fields
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['followers', 'following', 'followersCount', 'followingCount']) &&
        (
          // Allow adding current user's ID to followers array
          (request.auth.uid in request.resource.data.followers && !(request.auth.uid in resource.data.followers)) ||
          // Allow removing current user's ID from followers array  
          (!(request.auth.uid in request.resource.data.followers) && request.auth.uid in resource.data.followers) ||
          // Allow adding current user's ID to following array
          (request.auth.uid in request.resource.data.following && !(request.auth.uid in resource.data.following)) ||
          // Allow removing current user's ID from following array
          (!(request.auth.uid in request.resource.data.following) && request.auth.uid in resource.data.following) ||
          // Allow count updates 
          (request.resource.data.followersCount >= 0 && request.resource.data.followingCount >= 0)
        );
    }
    
    // Users can read other users' profile data for social features and search
    match /users/{userId} {
      allow read: if request.auth != null;
      
      // Note: For search functionality, we allow all authenticated users to read user profiles
      // The client application should respect privacy settings and only show appropriate data
      // Private users can still be found in search but won't show sensitive information
    }
    
    // Mood entries - users can read/write their own data
    match /mood_entries/{userId}/entries/{entryId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User settings - users can read/write their own settings
    match /user_settings/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // SOS contacts - users can read/write their own SOS contacts
    match /sos_contacts/{userId}/contacts/{contactId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Following/Followers - users can manage their own social connections
    match /social_connections/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Posts - community feature rules
    match /posts/{postId} {
      // Anyone authenticated can read posts
      allow read: if request.auth != null;
      
      // Only authenticated users can create posts
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId;
      
      // Update/delete rules:
      // - Post author can update/delete their own post
      // - Any authenticated user may update ONLY likesCount (Â±1) or commentsCount (+1)
      allow update: if request.auth != null && (
        // Author full control
        request.auth.uid == resource.data.userId ||

        // Allow updates that change ONLY likesCount
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['likesCount']) ||

        // Allow updates that change ONLY commentsCount
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['commentsCount'])
      );

      // Only author can delete the post
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Post subcollections (likes, comments, shares)
    match /posts/{postId}/{subcollection=**} {
      // Anyone authenticated can read subcollections
      allow read: if request.auth != null;
      
      // Users can create likes/comments (with proper userId validation)
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId;
      
      // Users can delete their own likes/comments
      allow delete: if request.auth != null && 
                   request.auth.uid == resource.data.userId;
    }
    
    // Reports collection for community safety
    match /reports/{reportId} {
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.reportedBy;
      allow read: if false; // Only admins should read reports (implement admin rules later)
    }
    
    // Allow authenticated users to read public data they might need
    match /public_data/{document=**} {
      allow read: if request.auth != null;
    }
    
    // Deny all other operations
    match /{document=**} {
      allow read, write: if false;
    }
  }
}